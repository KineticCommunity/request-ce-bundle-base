<%@page import="com.kineticdata.commons.util.StringUtils"%>
<%!
    public static class LocaleHelper {

        private HttpServletRequest request;

        public LocaleHelper(HttpServletRequest request) {
            this.request = request;
        }

        public List<LocaleOption> getLocaleOptions() {
            // Initialize the results
            List<LocaleOption> results = new ArrayList<>();
            // Create a sorted list of locales
            List<Locale> systemLocales = Arrays.asList(Locale.getAvailableLocales());
            systemLocales.sort(new LocaleComparator());
            // For each of the system locales
            for (Locale locale : systemLocales) {

                // Determine the name and code
                String name = locale.getDisplayName(locale);
                String code = getCode(locale);
                // If the locale matches the browser locale
                if (locale.equals(request.getLocale())) {
                    // Add the option to the start of the list
                    results.add(0, new LocaleOption(name, code));
                }
                // If the locale does not match the browser locale
                else if (!Locale.ROOT.equals(locale)) {
                    // Add the option to the end of the list
                    results.add(new LocaleOption(name, code));
                }
            }

            // Return the results
            return results;
        }

        public String getCode(Locale locale) {
            String result;
            if (!"".equals(locale.getVariant())) {
                result = locale.getLanguage() 
                    + "_" + locale.getCountry()
                    + "_" + locale.getVariant();
            } else if (!"".equals(locale.getCountry())) {
                result = locale.getLanguage() 
                    + "_" + locale.getCountry();
            } else if (!"".equals(locale.getLanguage())) {
                result = locale.getLanguage();
            } else {
                result = "";
            }
            return result;
        }
    
        public static class LocaleComparator implements Comparator<Locale> {
            @Override
            public int compare(Locale o1, Locale o2) {
                return String.CASE_INSENSITIVE_ORDER.compare(
                    o1.getDisplayName(o1), 
                    o2.getDisplayName(o2));
            }
        }

        public static class LocaleOption {
            private String name;
            private String code;
            public LocaleOption(String name, String code) {
                this.name = name;
                this.code = code;
            }
            public String getName() {
                return name;
            }
            public String getCode() {
                return code;
            }
        }
    }
%>