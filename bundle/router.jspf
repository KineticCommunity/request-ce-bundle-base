<%-- AUTHENTICATION REQUIRED AND USER IS ANONYMOUS --%>
<%
    if (kapp != null && identity.isAnonymous() && kapp.getForms().isEmpty()) {
        response.sendRedirect(bundle.getSpaceLocation()+"/app/login?kapp="+kapp.getSlug());
        return;
    }
%>

<%-- INVALID SETUP ROUTING --%>
<%
    // If the request is scoped to a specific Kapp (space display pages are not)
    if (kapp != null) {
        // If there are any required setup attributes missing 
        if (setupHelper.isMissingRequiredAttributes(kapp)) {
            // Render the setup page (this will show the full setup page if the user is a space 
            // admin, or it will show a generic error message if they are not)
            request.getRequestDispatcher(bundle.getPath()+"/pages/setup.jsp").include(request, response);
            // Return so that no further JSP processing occurs
            return;
        }
        // If the user is not a space admin and are manually navigating to the setup page
        else if (!identity.isSpaceAdmin() && "setup".equals(request.getParameter("page"))) {
            // Simulate a 404 not found response
            response.setStatus(HttpServletResponse.SC_NOT_FOUND);
            request.getRequestDispatcher("/WEB-INF/pages/404.jsp").include(request, response);
            // Return so that no further JSP processing occurs
            return;
        }
    }
%>

<%-- PAGE/PARTIAL ROUTING --%>
<% 
    // Determine if there is a JSP that the response should be delegated to
    String delegateJsp = null;
    // Verify that no more than 1 routing parameter is provided to catch potential infinite loops
    int routedParameterCount = 0;
    if (request.getParameterValues("page") != null) {
        routedParameterCount += request.getParameterValues("page").length;
    }
    if (request.getParameterValues("partial") != null) {
        routedParameterCount += request.getParameterValues("partial").length;
    }
    // If more than one routing parameter found, throw error
    if (routedParameterCount > 1) {
        throw new RuntimeException("Multiple 'page' or 'partial' parameters provided by the "+
            "request. This is potentially due to recursively importing or including a routed "+
            "kapp page.");
    } 
    // Otherwise delegate to appropriate page or partial
    else if (request.getParameter("page") != null) {
        delegateJsp = bundle.getPath()+"/pages/"+request.getParameter("page")+".jsp";
    } else if (request.getParameter("partial") != null) {
        delegateJsp = bundle.getPath()+"/partials/"+request.getParameter("partial")+".jsp";
    }
    
    // If the response content should be delegated to a different JSP
    if (delegateJsp != null) {
        // Ensure that the specified path matches the "normalized" path and that '..' can't be used
        // to include unintended file contents
        String normalizedPath = new java.net.URI(delegateJsp).normalize().toString();
        // If the specified delegate JSP is not using a "normalized" form
        if (!delegateJsp.equals(normalizedPath)) {
            // Simulate a 404 not found
            request.setAttribute("javax.servlet.error.message", delegateJsp);
            response.setStatus(response.SC_NOT_FOUND);
            request.getRequestDispatcher("/WEB-INF/pages/404.jsp").include(request, response);
        }
        // If the specified delegate JSP is using a normalized form
        else {
            // Render the contents of the jsp
            try {
                request.getRequestDispatcher(delegateJsp).include(request, response);
            }
            catch (ServletException e){
                // If the specified delegate JSP doesn't exist
                /** This is looking for a Tomcat specific error message **/
                if (e.getMessage() != null && e.getMessage().trim().matches("^File \\[.+\\] not found$")) {
                    // Simulate a 404 not found
                    request.setAttribute("javax.servlet.error.message", delegateJsp);
                    response.setStatus(response.SC_NOT_FOUND);
                    request.getRequestDispatcher("/WEB-INF/pages/404.jsp").include(request, response);
                }
                else { throw e; }
            }
        }
        // Return so that no further JSP processing occurs
        return;
    }
%>
